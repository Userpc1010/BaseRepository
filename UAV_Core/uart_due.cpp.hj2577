#include "uart_due.h"
#include <wiringSerial.h>
#include <errno.h>
#include <QDebug>

UART_Protokol::UART_Protokol(){}

void UART_Protokol::StartProtokol( bool selftest )

{
    if ((fd = serialOpen ("/dev/ttyS1", 115200)) < 0)
    {
      qDebug()<<"Ошибка открытия порта"<<strerror (errno) ;
    }

    startTimer(50);

    sp_ResetAll();     // Полный сброс протокола

    if (selftest) { sp_Send("Start"); qDebug()<<"Serial запущен"; }
}


void UART_Protokol::timerEvent(QTimerEvent*)
{
    if(serialDataAvail (fd))
   {      

      sp_Read(); // Вызов «читалки» принятых данных

      if(sp_packetAvailable)             // Если после вызова «читалки» пакет полностью принят
      {
       ParseCommand();                   // Обрабатываем принятую информацию
       sp_ResetAll();                    // Полный сброс протокола.

      }
   }
}

void UART_Protokol::sp_Reset()
{
  sp_startMarkerStatus = 0;  // Сброс флага маркера начала пакета
  sp_stopMarkerStatus = 0;  // Сброс флага маркера конца пакета
  sp_dataLength = 0;    // Сброс флага принимаемых данных
  sp_packetAvailable = false; // Сброс флага завершения приема пакета
}


void UART_Protokol::sp_ResetAll()
{

  sp_dataString = "";    // Обнуляем буфер приема данных
  sp_Reset();     // Частичный сброс протокола
}

void UART_Protokol::sp_Read()
{

  while(serialDataAvail(fd) && !sp_packetAvailable)            // Пока в буфере есть что читать и пакет не является принятым
  {
    int bufferChar = serialGetchar(fd);                           // Читаем очередной байт из буфера


    if(sp_startMarkerStatus < sp_startMarker.length())        // Если стартовый маркер не сформирован (его длинна меньше той, которая должна быть)
    {
     if(sp_startMarker[sp_startMarkerStatus] == bufferChar)   // Если очередной байт из буфера совпадает с очередным байтом в маркере
     {
       sp_startMarkerStatus++;                                // Увеличиваем счетчик совпавших байт маркера

     }
     else
     {
       sp_ResetAll();                                         // Если байты не совпали, то это не маркер. Нас нае****, расходимся.
     }
    }
    else
    {
     // Стартовый маркер прочитан полностью
       if(sp_dataLength <= 0)                                 // Если длинна пакета на установлена
       {

         sp_dataLength = bufferChar;

       }
      else                                                    // Если прочитанная из буфера длинна пакета больше нуля
      {
        if(sp_dataLength > sp_dataString.length())            // Если длинна пакета данных меньше той, которая должна быть
        {
            sp_dataString += (char)bufferChar;                  // прибавляем полученный байт к строке пакета

        }
        else                                                  // Если с длинной пакета данных все нормально
        {
          if(sp_stopMarkerStatus < sp_stopMarker.length())    // Если принятая длинна маркера конца пакета меньше фактической
          {
              if(sp_stopMarker[sp_stopMarkerStatus] == bufferChar)  // Если очередной байт из буфера совпадает с очередным байтом маркера
            {
              sp_stopMarkerStatus++;                              // Увеличиваем счетчик удачно найденных байт маркера
              if(sp_stopMarkerStatus == sp_stopMarker.length())
              {
                                                                     // Если после прочтения очередного байта маркера, длинна маркера совпала, то сбрасываем все флаги (готовимся к приему нового пакета)
                sp_Reset();
                sp_packetAvailable = true;                        // и устанавливаем флаг готовности пакета
              }
            }
            else
            {
              sp_ResetAll();                                      // Иначе это не маркер, а х.з. что. Полный ресет.
            }
          }
        }
      }
    }
  }
}

void UART_Protokol::sp_Send(const char data[] )
{
//  qDebug()<<data;
  serialPuts(fd, "");                              // Изменяем лог напряжения
  serialPuts(fd,sp_startMarker);          // Отправляем маркер начала пакета
  serialPutchar(fd, sizeof(data));                 // Отправляем длину передаваемых данных
  serialPuts(fd, data);                    // Отправляем сами данные
  serialPuts(fd,sp_stopMarker);           // Отправляем маркер конца пакета

}

void UART_Protokol::sp_Send_integer(QByteArray data)
{
//  qDebug()<<data;
  serialPuts(fd, "");                              // Изменяем лог напряжения
  serialPuts(fd,sp_startMarker);          // Отправляем маркер начала пакета
  serialPutchar(fd, data.length());                 // Отправляем длину передаваемых данных
  serialPuts(fd, data);                             // Отправляем сами данные
  serialPuts(fd,sp_stopMarker);           // Отправляем маркер конца пакета

}


void UART_Protokol::ParseCommand()
{

  //if(sp_dataString == "Start") { TransmitData = "ready"; sp_Send(TransmitData); qDebug()<<"Самопроверка"; }
  if(sp_dataString == "ready") { qDebug()<<"Самопроверка"; lock = true;}

  if (sp_dataString =="MG1")  {  emit ServerWrite ("MG1");     }
  if (sp_dataString =="MG0")  {  emit ServerWrite ("MG0");     }
  if (sp_dataString =="MG")   {  emit ServerWrite ("MG");      }

  if ( sp_dataString[0] == 'T' && sp_dataString[1] == 'E' && sp_dataString[2] == 'L' && sp_dataString[3] == 'E' ) //Телеметрия
  {
   // Telemetriy (sp_dataString);

  }
}
